{"version":3,"sources":["assests/config.js","components/Head.js","components/MovieRow.js","App.js","serviceWorker.js","index.js"],"names":["api","Head","props","className","href","target","alt","src","style","width","padding","onChange","searchChangeHandler","placeholder","MovieRow","key","this","movie","id","poster","borderRadius","fontSize","fontWeight","title","overview","React","Component","App","state","trending","url","$","ajax","success","searchResults","console","log","results","movieRows","forEach","poster_path","movieRow","push","setState","rows","error","xhr","status","err","searchTerm","event","value","search","bind","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"8OAAaA,EAAM,mCCEJ,SAASC,EAAKC,GAC3B,OACE,yBAAKC,UAAU,cACb,uBAAGC,KAAK,6BAA6BC,OAAO,UAC1C,yBACEC,IAAI,GACJC,IAAI,aACJC,MAAO,CAAEC,MAAO,OAAQC,QAAS,WAGrC,2BACEC,SAAUT,EAAMU,oBAChBC,YAAY,sB,ICsBLC,E,uKAhCX,OACE,2BAAOC,IAAKC,KAAKd,MAAMe,MAAMC,GAAIV,MAAO,CAAEE,QAAS,SACjD,+BACE,4BACE,4BACE,uBACEN,KAAI,2CAAsCY,KAAKd,MAAMe,MAAMC,IAC3Db,OAAO,UAEP,yBACEC,IAAI,SACJG,MAAM,MACNF,IAAKS,KAAKd,MAAMe,MAAME,OACtBX,MAAO,CAAEY,aAAc,YAI7B,wBAAIX,MAAM,OACV,4BACE,0BAAMD,MAAO,CAAEa,SAAU,OAAQC,WAAY,SAC1CN,KAAKd,MAAMe,MAAMM,OAEpB,6BACA,8BAAOP,KAAKd,MAAMe,MAAMO,kB,GAzBfC,IAAMC,WCkFdC,E,kDA5Eb,WAAYzB,GAAQ,IAAD,8BACjB,cAAMA,IAED0B,MAAQ,GAEb,EAAKC,WALY,E,uDAQP,IAAD,OACHC,EAAG,gEAA4D9B,GACrE+B,IAAEC,KAAK,CACLF,IAAKA,EACLG,QAAS,SAACC,GACRC,QAAQC,IAAI,gBACZ,IAAMC,EAAUH,EAAcG,QAE1BC,EAAY,GAEhBD,EAAQE,SAAQ,SAACtB,GACfA,EAAME,OAAS,kCAAoCF,EAAMuB,YACzD,IAAMC,EAAW,kBAAC,EAAD,CAAU1B,IAAKE,EAAMC,GAAID,MAAOA,IACjDqB,EAAUI,KAAKD,MAGjB,EAAKE,SAAS,CAAEC,KAAMN,KAExBO,MAAO,SAACC,EAAKC,EAAQC,GACnBb,QAAQU,MAAM,6B,6BAKbI,GAAa,IAAD,OACE,KAAfA,GACFjC,KAAKa,WAEP,IAAMC,EAAG,0DAAsDmB,EAAtD,oBAA4EjD,GACrF+B,IAAEC,KAAK,CACLF,IAAKA,EACLG,QAAS,SAACC,GACRC,QAAQC,IAAI,gBACZ,IAAMC,EAAUH,EAAcG,QAE1BC,EAAY,GAEhBD,EAAQE,SAAQ,SAACtB,GACfA,EAAME,OAAS,kCAAoCF,EAAMuB,YACzD,IAAMC,EAAW,kBAAC,EAAD,CAAU1B,IAAKE,EAAMC,GAAID,MAAOA,IACjDqB,EAAUI,KAAKD,MAGjB,EAAKE,SAAS,CAAEC,KAAMN,KAExBO,MAAO,SAACC,EAAKC,EAAQC,GACnBb,QAAQU,MAAM,6B,0CAKAK,GAClB,IAAMD,EAAaC,EAAM7C,OAAO8C,MAChCnC,KAAKoC,OAAOH,K,+BAIZ,OACE,yBAAK9C,UAAU,OACb,kBAACF,EAAD,CAAMW,oBAAqBI,KAAKJ,oBAAoByC,KAAKrC,QACzD,yBAAKb,UAAU,aACb,yBAAKA,UAAU,UAAUa,KAAKY,MAAMgB,Y,GAtE5BlB,aCKE4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAxB,GACLV,QAAQU,MAAMA,EAAMyB,a","file":"static/js/main.00e0ea31.chunk.js","sourcesContent":["export const api = '50061f964870e6c96229606998cd942c'\r\n","import React from 'react'\r\n\r\nexport default function Head(props) {\r\n  return (\r\n    <div className=\"Navigation\">\r\n      <a href=\"https://www.themoviedb.org\" target=\"_blank\">\r\n        <img\r\n          alt=\"\"\r\n          src=\"./logo.svg\"\r\n          style={{ width: '80px', padding: '30px' }}\r\n        />\r\n      </a>\r\n      <input\r\n        onChange={props.searchChangeHandler}\r\n        placeholder=\"search movies...\"\r\n      />\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nclass MovieRow extends React.Component {\r\n  render() {\r\n    return (\r\n      <table key={this.props.movie.id} style={{ padding: '20px' }}>\r\n        <tbody>\r\n          <tr>\r\n            <td>\r\n              <a\r\n                href={`https://www.themoviedb.org/movie/${this.props.movie.id}`}\r\n                target=\"_blank\"\r\n              >\r\n                <img\r\n                  alt=\"poster\"\r\n                  width=\"120\"\r\n                  src={this.props.movie.poster}\r\n                  style={{ borderRadius: '10px' }}\r\n                />\r\n              </a>\r\n            </td>\r\n            <td width=\"10\"></td>\r\n            <td>\r\n              <span style={{ fontSize: '20px', fontWeight: 'bold' }}>\r\n                {this.props.movie.title}\r\n              </span>\r\n              <br />\r\n              <span>{this.props.movie.overview}</span>\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MovieRow\r\n","import React, { Component } from 'react'\nimport './App.css'\nimport $ from 'jquery'\nimport { api } from './assests/config'\nimport Head from './components/Head'\nimport MovieRow from './components/MovieRow'\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {}\n\n    this.trending()\n  }\n\n  trending() {\n    const url = `https://api.themoviedb.org/3/trending/all/day?api_key=${api}`\n    $.ajax({\n      url: url,\n      success: (searchResults) => {\n        console.log('Fetched data')\n        const results = searchResults.results\n\n        var movieRows = []\n\n        results.forEach((movie) => {\n          movie.poster = 'https://image.tmdb.org/t/p/w185' + movie.poster_path\n          const movieRow = <MovieRow key={movie.id} movie={movie} />\n          movieRows.push(movieRow)\n        })\n\n        this.setState({ rows: movieRows })\n      },\n      error: (xhr, status, err) => {\n        console.error('Failed to fetch data')\n      }\n    })\n  }\n\n  search(searchTerm) {\n    if (searchTerm === '') {\n      this.trending()\n    }\n    const url = `https://api.themoviedb.org/3/search/movie?query=${searchTerm}&api_key=${api}`\n    $.ajax({\n      url: url,\n      success: (searchResults) => {\n        console.log('Fetched data')\n        const results = searchResults.results\n\n        var movieRows = []\n\n        results.forEach((movie) => {\n          movie.poster = 'https://image.tmdb.org/t/p/w500' + movie.poster_path\n          const movieRow = <MovieRow key={movie.id} movie={movie} />\n          movieRows.push(movieRow)\n        })\n\n        this.setState({ rows: movieRows })\n      },\n      error: (xhr, status, err) => {\n        console.error('Failed to fetch data')\n      }\n    })\n  }\n\n  searchChangeHandler(event) {\n    const searchTerm = event.target.value\n    this.search(searchTerm)\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Head searchChangeHandler={this.searchChangeHandler.bind(this)} />\n        <div className=\"Container\">\n          <div className=\"Movies\">{this.state.rows}</div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}